Linux命令使用
	ls：查看当前位置的文件
		-a 查看所有文件（包括隐藏文件）
		-l 长格式显示
		-i 查看文件的id号
		-h 便于人阅读的版式，主要体现在文件大小的显示上
		-d 显示目录的大小，后面可以接目录，使之不会显示成目录的内容
	cd：移动当前所在的位置
		..:可以返回上层
	mkdir：创建目录
		-p 递归创建
	cp：复制
		-rp old new 把old复制到new中
		-r 复制目录
		-p 保留文件属性
	Ctrl + L：命令行界面清屏
	rm：删除某个制定的文件
		-rf 级联删除
	mv：剪切或重命名
	pwd：显示当前路径（打印出当前的文件路径/print name of current/working directory）
	touch：可以新建一个文件，如果文件存在则会修改文件的时间戳
	vi：文本编辑器，可以编辑文本，进入后按i进入插入模式
		j 向下移动一行
		k 向上移动一行
		h 向左移动一个字符
		l 向右移动一个字符
		b 左移一个词
		w 右移一个词
		( 到句子的开头,同理)
		{ 到段落的开头,同理}
		r 替换一个字符
		R 一直替换
		c 修改文本直到按下Esc
		cw 修改一个词
		cnw 修改接下来的n个词
		/String 查找字符串
			如果需要不区分大小写：:set ic
		u 撤销上一步的操作、
		dd 剪切
		y 复制（ny代表复制后n行，ndd同理）
		p 粘贴（p放在行下，P放在行上）
		:%s/old/new/g 全文替换，把old替换成new（若在:后加上n1，n2则只在n1和n2行直接进行替换）
		:w 写入 （若后面直接接名字，则是另存为）
		:q 退出
		:x 保存
		:wq 写入并退出
		ZZ 保存退出
	cat：查看文本内容
	Ctrl + C：直接舍去现在输入的命令
	diff -u a b：对比a和b的差异
------------------------------------------------------------------
Git命令使用
	git init:初始化仓库
	git status:获取当前工作区的状态
	git add 文件名:将已修改的文件加入暂存区
			. 将工作区所有文件加入暂存区 
	git rm --cached 文件名:将加入了暂存区的文件还原
	git commit:把所有暂存区的文件提交到仓库中
		注意：这个操作的执行必须要写入注释告知修改的地方,如果没有注释，这次的提交将会失败
		-m "" 可以直接在引号里面接一些比较短的注释
		--amend --reset-author:可以把上一次的提交人和邮箱修改成刚才修改的信息
	git config --global针对用户(--local针对项目) user.name/email 新的name或email:修改名字和邮箱
	git log:查看修改的日志
	git checkout 分支名:转到特定的分支上 
		-- 文件名:把某个文件的修改重置（未被提交至暂存区）
		-b 创建一个分支并转到
		操作id前5位 回退到指定操作位置上
	git branch:查看分支
		-m 原分支名 修改后分支名 修改分支名字 
		-d 删除某个分支，如果该分支上有操作，则无法删除
		-D 强制删除某个分支
		-v 显示当前分支上的最近的一条修改消息
	git remote show:查看远程仓库，若后面加了具体的仓库名则会显示它的详细信息
	git merge 分支名:把某个分支的修改应用到当前分支上
	git reset HEAD 文件名:把放入暂存区的文件拿出 HEAD始终指向当前分支
	git stash:临时保存现在分支上的工作状态，以切换到其他分支上
			pop:恢复最近的一个工作状态
			apply 工作状态名:恢复指定的工作状态
	git balme:显示文档修改详情
	git diff：比较工作区与暂存区之间的差异
	git push -u origin master:把当前的分支mastern内容推送到origin分支上
	git remote add origin 远程仓库地址:用origin代替远程仓库地址
	git clone 远程仓库地址 (别名):把远程仓库克隆到本地
	github连接：连接github推荐使用SSH地址